[
  {
    "id": 92,
    "question": "What is TypeScript and what are its main features?",
    "answer": "<p>TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It adds static typing to JavaScript, making it more robust and maintainable.</p><h3>Main Features:</h3><ul><li>Static typing</li><li>Object-oriented programming</li><li>Type inference</li><li>Interfaces</li><li>Generics</li></ul><h3>Example:</h3><pre><code>// JavaScript\nfunction add(a, b) {\n  return a + b;\n}\n\n// TypeScript\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\n// Using the function\nconsole.log(add(5, 3)); // 8\nconsole.log(add('5', '3')); // Error: Argument of type 'string' is not assignable to parameter of type 'number'</code></pre>",
    "category": "TypeScript",
    "difficulty": "Beginner"
  },
  {
    "id": 93,
    "question": "What are TypeScript Interfaces and how do they work?",
    "answer": "<p>Interfaces in TypeScript define the structure of an object. They act like contracts that objects must follow.</p><h3>Basic Interface Example:</h3><pre><code>// Define interface\ninterface User {\n  name: string;\n  age: number;\n  email?: string; // Optional property\n}\n\n// Use interface\nconst user: User = {\n  name: 'John',\n  age: 30\n  // email is optional, so we can omit it\n};\n\n// Function using interface\nfunction printUser(user: User): void {\n  console.log(`${user.name} is ${user.age} years old`);\n}</code></pre><h3>Extending Interfaces:</h3><pre><code>interface Employee extends User {\n  department: string;\n  salary: number;\n}\n\nconst employee: Employee = {\n  name: 'Jane',\n  age: 25,\n  department: 'IT',\n  salary: 50000\n};</code></pre>",
    "category": "TypeScript",
    "difficulty": "Beginner"
  },
  {
    "id": 94,
    "question": "What are TypeScript Generics and when should you use them?",
    "answer": "<p>Generics allow you to write flexible, reusable code that can work with different types. They're like templates for types.</p><h3>Basic Generic Example:</h3><pre><code>// Generic function\nfunction getFirst<T>(arr: T[]): T {\n  return arr[0];\n}\n\n// Using the generic function\nconst numbers = getFirst<number>([1, 2, 3]); // number\nconst strings = getFirst<string>(['a', 'b', 'c']); // string</code></pre><h3>Generic Interface Example:</h3><pre><code>interface Box<T> {\n  value: T;\n}\n\nconst numberBox: Box<number> = { value: 42 };\nconst stringBox: Box<string> = { value: 'Hello' };</code></pre><h3>Generic Class Example:</h3><pre><code>class Container<T> {\n  private items: T[] = [];\n\n  add(item: T): void {\n    this.items.push(item);\n  }\n\n  getFirst(): T {\n    return this.items[0];\n  }\n}\n\n// Using the generic class\nconst numberContainer = new Container<number>();\nnumberContainer.add(1);\nnumberContainer.add(2);\nconsole.log(numberContainer.getFirst()); // 1</code></pre>",
    "category": "TypeScript",
    "difficulty": "Intermediate"
  },
  {
    "id": 95,
    "question": "What is Type Inference in TypeScript?",
    "answer": "<p>Type inference is TypeScript's ability to automatically determine the type of a variable based on its value. It helps reduce the need for explicit type annotations.</p><h3>Basic Examples:</h3><pre><code>// Type inference with variables\nlet name = 'John'; // TypeScript infers type as string\nlet age = 30; // TypeScript infers type as number\nlet isActive = true; // TypeScript infers type as boolean\n\n// Type inference with arrays\nconst numbers = [1, 2, 3]; // TypeScript infers type as number[]\nconst mixed = [1, 'two', 3]; // TypeScript infers type as (number | string)[]\n\n// Type inference with objects\nconst user = {\n  name: 'John',\n  age: 30\n}; // TypeScript infers type as { name: string; age: number }</code></pre><h3>Function Return Type Inference:</h3><pre><code>// TypeScript infers return type as number\nfunction add(a: number, b: number) {\n  return a + b;\n}\n\n// TypeScript infers return type as string\nfunction greet(name: string) {\n  return `Hello, ${name}!`;\n}</code></pre>",
    "category": "TypeScript",
    "difficulty": "Beginner"
  },
  {
    "id": 96,
    "question": "What are Type Guards in TypeScript?",
    "answer": "<p>Type guards are expressions that perform runtime checks to ensure a value is of a specific type. They help narrow down types within conditional blocks.</p><h3>Basic Type Guard Examples:</h3><pre><code>// typeof type guard\nfunction processValue(value: string | number) {\n  if (typeof value === 'string') {\n    // TypeScript knows value is string here\n    console.log(value.toUpperCase());\n  } else {\n    // TypeScript knows value is number here\n    console.log(value.toFixed(2));\n  }\n}\n\n// instanceof type guard\nclass Animal {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Dog extends Animal {\n  bark() {\n    return 'Woof!';\n  }\n}\n\nfunction processAnimal(animal: Animal) {\n  if (animal instanceof Dog) {\n    // TypeScript knows animal is Dog here\n    console.log(animal.bark());\n  }\n}</code></pre><h3>Custom Type Guard Example:</h3><pre><code>interface Bird {\n  fly(): void;\n  layEggs(): void;\n}\n\ninterface Fish {\n  swim(): void;\n  layEggs(): void;\n}\n\n// Custom type guard\nfunction isFish(pet: Fish | Bird): pet is Fish {\n  return (pet as Fish).swim !== undefined;\n}\n\nfunction move(pet: Fish | Bird) {\n  if (isFish(pet)) {\n    // TypeScript knows pet is Fish here\n    pet.swim();\n  } else {\n    // TypeScript knows pet is Bird here\n    pet.fly();\n  }\n}</code></pre>",
    "category": "TypeScript",
    "difficulty": "Intermediate"
  },
  {
    "id": 97,
    "question": "What are TypeScript Decorators and how do they work?",
    "answer": "<p>Decorators are a design pattern that allows you to add behavior to classes and their members. They are functions that can be attached to classes, methods, or properties.</p><h3>Basic Decorator Examples:</h3><pre><code>// Class decorator\nfunction log(target: any) {\n  console.log('Class decorator called');\n}\n\n@log\nclass Example {\n  // Class implementation\n}\n\n// Method decorator\nfunction logMethod(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n\n  descriptor.value = function(...args: any[]) {\n    console.log(`Calling ${propertyKey} with:`, args);\n    return originalMethod.apply(this, args);\n  };\n\n  return descriptor;\n}\n\nclass Calculator {\n  @logMethod\n  add(a: number, b: number): number {\n    return a + b;\n  }\n}</code></pre><h3>Property Decorator Example:</h3><pre><code>function required(target: any, propertyKey: string) {\n  let value: string;\n\n  const getter = function() {\n    return value;\n  };\n\n  const setter = function(newVal: string) {\n    if (!newVal) {\n      throw new Error(`${propertyKey} is required`);\n    }\n    value = newVal;\n  };\n\n  Object.defineProperty(target, propertyKey, {\n    get: getter,\n    set: setter\n  });\n}\n\nclass User {\n  @required\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}</code></pre>",
    "category": "TypeScript",
    "difficulty": "Advanced"
  },
  {
    "id": 98,
    "question": "What are TypeScript Utility Types?",
    "answer": "<p>Utility types are built-in TypeScript types that help transform existing types. They make it easier to work with types in a flexible way.</p><h3>Common Utility Types:</h3><pre><code>// Partial<T> - Makes all properties optional\ninterface User {\n  name: string;\n  age: number;\n}\n\ntype PartialUser = Partial<User>;\n// Equivalent to:\n// { name?: string; age?: number; }\n\n// Required<T> - Makes all properties required\ninterface Config {\n  name?: string;\n  age?: number;\n}\n\ntype RequiredConfig = Required<Config>;\n// Equivalent to:\n// { name: string; age: number; }\n\n// Pick<T, K> - Select specific properties\ninterface Todo {\n  title: string;\n  description: string;\n  completed: boolean;\n}\n\ntype TodoPreview = Pick<Todo, 'title' | 'completed'>;\n// Equivalent to:\n// { title: string; completed: boolean; }\n\n// Omit<T, K> - Remove specific properties\ntype TodoInfo = Omit<Todo, 'completed'>;\n// Equivalent to:\n// { title: string; description: string; }</code></pre><h3>More Utility Types:</h3><pre><code>// Record<K, T> - Create type with specific keys and values\ntype CatInfo = {\n  age: number;\n  breed: string;\n};\n\ntype CatName = 'miffy' | 'boris';\nconst cats: Record<CatName, CatInfo> = {\n  miffy: { age: 10, breed: 'Persian' },\n  boris: { age: 5, breed: 'Maine Coon' }\n};\n\n// ReturnType<T> - Get return type of function\ntype T0 = ReturnType<() => string>; // string\ntype T1 = ReturnType<(s: string) => void>; // void\n\n// Parameters<T> - Get parameters of function\ntype T2 = Parameters<(name: string, age: number) => void>; // [string, number]</code></pre>",
    "category": "TypeScript",
    "difficulty": "Intermediate"
  },
  {
    "id": 99,
    "question": "What is the difference between 'type' and 'interface' in TypeScript?",
    "answer": "<p>Both 'type' and 'interface' are used to define custom types in TypeScript, but they have some key differences.</p><h3>Basic Examples:</h3><pre><code>// Interface\ninterface User {\n  name: string;\n  age: number;\n}\n\n// Type\ntype User = {\n  name: string;\n  age: number;\n};\n\n// Both can be extended\ninterface Employee extends User {\n  department: string;\n}\n\ntype Employee = User & {\n  department: string;\n};</code></pre><h3>Key Differences:</h3><ul><li><strong>Declaration Merging:</strong><ul><li>Interfaces can be merged</li><li>Types cannot be merged</li></ul></li><li><strong>Computed Properties:</strong><ul><li>Types can use computed properties</li><li>Interfaces cannot</li></ul></li><li><strong>Union Types:</strong><ul><li>Types can create union types</li><li>Interfaces cannot</li></ul></li></ul><h3>Examples of Differences:</h3><pre><code>// Interface merging\ninterface Animal {\n  name: string;\n}\ninterface Animal {\n  age: number;\n}\n// Result: { name: string; age: number; }\n\n// Type union\ntype Status = 'pending' | 'approved' | 'rejected';\n\n// Computed properties in type\ntype Keys = 'firstname' | 'surname';\ntype DudeType = {\n  [key in Keys]: string;\n};\n// Result: { firstname: string; surname: string; }</code></pre><h3>When to Use Each:</h3><ul><li><strong>Use Interface when:</strong><ul><li>Defining object shapes</li><li>Need declaration merging</li><li>Working with object-oriented design</li></ul></li><li><strong>Use Type when:</strong><ul><li>Creating union types</li><li>Working with tuples</li><li>Need computed properties</li><li>Creating mapped types</li></ul></li></ul>",
    "category": "TypeScript",
    "difficulty": "Intermediate"
  },
  {
    "id": 100,
    "question": "What are TypeScript Enums and when should you use them?",
    "answer": "<p>Enums in TypeScript are a way to define a set of named constants. They make it easier to work with a set of related values.</p><h3>Basic Enum Examples:</h3><pre><code>// Numeric enum\nenum Direction {\n  Up = 1,\n  Down,\n  Left,\n  Right\n}\n\n// String enum\nenum UserRole {\n  Admin = 'ADMIN',\n  User = 'USER',\n  Guest = 'GUEST'\n}\n\n// Using enums\nfunction move(direction: Direction) {\n  switch (direction) {\n    case Direction.Up:\n      console.log('Moving up');\n      break;\n    case Direction.Down:\n      console.log('Moving down');\n      break;\n    // ...\n  }\n}</code></pre><h3>Const Enums:</h3><pre><code>// Const enum (more efficient)\nconst enum Colors {\n  Red,\n  Green,\n  Blue\n}\n\n// Using const enum\nlet color = Colors.Red;\n// Compiles to: let color = 0;</code></pre><h3>Real-world Example:</h3><pre><code>// HTTP Status Codes\nenum HttpStatus {\n  OK = 200,\n  BadRequest = 400,\n  Unauthorized = 401,\n  Forbidden = 403,\n  NotFound = 404,\n  InternalServerError = 500\n}\n\nfunction handleResponse(status: HttpStatus) {\n  switch (status) {\n    case HttpStatus.OK:\n      return 'Success';\n    case HttpStatus.NotFound:\n      return 'Resource not found';\n    case HttpStatus.InternalServerError:\n      return 'Server error';\n    default:\n      return 'Unknown status';\n  }\n}</code></pre><h3>When to Use Enums:</h3><ul><li>When you have a set of related constants</li><li>When you need type safety for a set of values</li><li>When you want to provide better code documentation</li><li>When you need to iterate over a set of values</li></ul>",
    "category": "TypeScript",
    "difficulty": "Beginner"
  },
  {
    "id": 136,
    "question": "Introduction",
    "answer": "<p><strong>My name is Jimit Hothi, and I have over 9 years of experience in the software development industry.</strong> I have worked on multiple domains and technologies. specializing in JavaScript and Node.js and building scalable, secure, and high-performance web applications.</p><p>I have hands-on experience in <strong>both frontend and backend development</strong>. On the frontend, I'm proficient with modern frameworks like <strong>Angular, React </strong>, while on the backend, I develop <strong>RESTful APIs</strong> and services using <strong>Node.js</strong>.</p><p>In terms of cloud experience, I have worked with <strong>Google Cloud Functions</strong> to build and deploy serverless solutions and microservices. I also have experience with Amazon Web Services (AWS), including services like Lambda, S3, CloudWatch, and EC2, for managing cloud infrastructure, deployment automation, and monitoring.</p><p>Throughout my career, I have contributed to various phases of the software development lifecycle—from requirement gathering and system design to development, testing, deployment, and maintenance. I’ve also handled responsibilities such as team coordination, client communication, code reviews, and project delivery.</p><p>I’m comfortable working both independently and collaboratively in agile environments.</p>",
    "category": "General",
    "difficulty": "Intermediate"
  },
  {
    "id": 137,
    "question": "What is Git and what are its main features?",
    "answer": "<p>Git is a distributed version control system that helps track changes in source code during software development.</p><h3>Key Features:</h3><ul><li>Distributed Version Control</li><li>Branching and Merging</li><li>Staging Area</li><li>Data Integrity</li><li>Speed and Performance</li></ul><h3>Basic Git Commands:</h3><pre><code># Initialize a new repository\n$ git init\n\n# Clone a repository\n$ git clone https://github.com/username/repository.git\n\n# Check repository status\n$ git status\n\n# Add files to staging area\n$ git add filename.txt\n$ git add .  # Add all files\n\n# Commit changes\n$ git commit -m \"Your commit message\"\n\n# Push changes to remote\n$ git push origin main</code></pre>",
    "category": "Git",
    "difficulty": "Beginner"
  },
  {
    "id": 138,
    "question": "What is the difference between git pull and git fetch?",
    "answer": "<p>git pull and git fetch are both used to get updates from a remote repository, but they work differently.</p><h3>git fetch:</h3><ul><li>Downloads new data from remote repository</li><li>Doesn't integrate changes into your working files</li><li>Safer option as it doesn't modify your local work</li></ul><h3>git pull:</h3><ul><li>Downloads AND integrates changes from remote repository</li><li>Combines git fetch + git merge</li><li>Can potentially cause conflicts</li></ul><h3>Example:</h3><pre><code># Using git fetch\n$ git fetch origin\n$ git merge origin/main\n\n# Using git pull (does both fetch and merge)\n$ git pull origin main</code></pre><h3>Best Practice:</h3><p>Use git fetch when you want to review changes before integrating them. Use git pull when you're confident about the remote changes and want to integrate them immediately.</p>",
    "category": "Git",
    "difficulty": "Intermediate"
  },
  {
    "id": 139,
    "question": "How do you resolve merge conflicts in Git?",
    "answer": "<p>Merge conflicts occur when Git can't automatically resolve differences between commits. Here's how to handle them:</p><h3>Steps to Resolve Conflicts:</h3><ol><li>Identify conflicting files</li><li>Open and edit the files</li><li>Choose which changes to keep</li><li>Mark conflicts as resolved</li><li>Complete the merge</li></ol><h3>Example Process:</h3><pre><code># When you see a conflict, Git marks the file like this:\n<<<<<<< HEAD\nYour changes\n=======\nChanges from other branch\n>>>>>>> branch-name\n\n# After editing, mark as resolved:\n$ git add filename.txt\n\n# Complete the merge:\n$ git commit -m \"Resolved merge conflicts\"</code></pre><h3>Best Practices:</h3><ul><li>Always pull latest changes before starting new work</li><li>Keep commits small and focused</li><li>Communicate with team members about changes</li><li>Use visual merge tools for complex conflicts</li></ul>",
    "category": "Git",
    "difficulty": "Intermediate"
  },
  {
    "id": 140,
    "question": "What is Git branching strategy and what are common branching models?",
    "answer": "<p>A branching strategy defines how branches are created and managed in a project. Here are common strategies:</p><h3>Git Flow:</h3><ul><li>main - production code</li><li>develop - development branch</li><li>feature/* - new features</li><li>release/* - release preparation</li><li>hotfix/* - urgent fixes</li></ul><h3>GitHub Flow:</h3><ul><li>main - always deployable</li><li>feature branches - for new work</li><li>Pull requests for review</li><li>Merge after approval</li></ul><h3>Example Commands:</h3><pre><code># Create and switch to new branch\n$ git checkout -b feature/new-feature\n\n# Switch between branches\n$ git checkout main\n\n# Merge branch\n$ git merge feature/new-feature\n\n# Delete branch\n$ git branch -d feature/new-feature</code></pre><h3>Best Practices:</h3><ul><li>Use meaningful branch names</li><li>Keep branches short-lived</li><li>Regularly sync with main branch</li><li>Delete branches after merging</li></ul>",
    "category": "Git",
    "difficulty": "Advanced"
  },
  {
    "id": 141,
    "question": "What is Git rebase and when should you use it?",
    "answer": "<p>Git rebase is a command that helps maintain a linear project history by moving or combining commits.</p><h3>Key Points:</h3><ul><li>Rewrites commit history</li><li>Creates a linear project history</li><li>Should be used before pushing to shared branches</li></ul><h3>Example:</h3><pre><code># Basic rebase\n$ git checkout feature-branch\n$ git rebase main\n\n# Interactive rebase (last 3 commits)\n$ git rebase -i HEAD~3\n\n# During interactive rebase, you can:\n# - pick: keep commit as is\n# - reword: change commit message\n# - edit: modify commit\n# - squash: combine with previous commit\n# - fixup: combine and discard message\n# - drop: remove commit</code></pre><h3>Best Practices:</h3><ul><li>Don't rebase commits that have been pushed to public repositories</li><li>Use rebase to keep feature branches up to date with main</li><li>Use interactive rebase to clean up local commits before pushing</li></ul>",
    "category": "Git",
    "difficulty": "Advanced"
  },
  {
    "id": 142,
    "question": "What is Git stash and how do you use it?",
    "answer": "<p>Git stash temporarily saves your uncommitted changes, allowing you to switch branches without committing incomplete work.</p><h3>Common Stash Commands:</h3><pre><code># Save changes to stash\n$ git stash save \"Work in progress\"\n\n# List all stashes\n$ git stash list\n\n# Apply most recent stash\n$ git stash apply\n\n# Apply specific stash\n$ git stash apply stash@{2}\n\n# Apply and remove stash\n$ git stash pop\n\n# Remove specific stash\n$ git stash drop stash@{1}\n\n# Clear all stashes\n$ git stash clear</code></pre><h3>Best Practices:</h3><ul><li>Use descriptive messages when stashing</li><li>Regularly clean up old stashes</li><li>Consider using git stash push -m \"message\" for better organization</li><li>Use git stash branch to create a new branch from a stash</li></ul>",
    "category": "Git",
    "difficulty": "Intermediate"
  },
  {
    "id": 143,
    "question": "What are Git hooks and how do you use them?",
    "answer": "<p>Git hooks are scripts that run automatically at specific points in the Git workflow.</p><h3>Common Hooks:</h3><ul><li>pre-commit: Runs before commit is created</li><li>post-commit: Runs after commit is created</li><li>pre-push: Runs before code is pushed</li><li>pre-rebase: Runs before rebase starts</li></ul><h3>Example pre-commit hook:</h3><pre><code>#!/bin/sh\n\n# Run linter\nnpm run lint\n\n# Run tests\nnpm test\n\n# If any command fails, prevent commit\nif [ $? -ne 0 ]; then\n  echo \"Tests must pass before commit!\"\n  exit 1\nfi</code></pre><h3>Setting up hooks:</h3><pre><code># Create hook file\n$ touch .git/hooks/pre-commit\n\n# Make it executable\n$ chmod +x .git/hooks/pre-commit\n\n# Using Husky (popular hook manager)\n$ npm install husky --save-dev\n\n# Configure in package.json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run lint\",\n      \"pre-push\": \"npm test\"\n    }\n  }\n}</code></pre>",
    "category": "Git",
    "difficulty": "Advanced"
  },
  {
    "id": 144,
    "question": "How do you undo changes in Git?",
    "answer": "<p>Git provides several ways to undo changes depending on the situation.</p><h3>Common Scenarios:</h3><pre><code># Undo working directory changes\n$ git checkout -- filename.txt\n\n# Unstage changes (keep working directory)\n$ git reset HEAD filename.txt\n\n# Undo last commit (keep changes staged)\n$ git reset --soft HEAD~1\n\n# Undo last commit (keep changes in working directory)\n$ git reset HEAD~1\n\n# Undo last commit (discard changes)\n$ git reset --hard HEAD~1\n\n# Revert a specific commit\n$ git revert commit-hash\n\n# Amend last commit\n$ git commit --amend -m \"New commit message\"</code></pre><h3>Best Practices:</h3><ul><li>Use git reset for local changes</li><li>Use git revert for pushed commits</li><li>Always create a backup branch before major undo operations</li><li>Be careful with --hard reset as it permanently deletes changes</li></ul>",
    "category": "Git",
    "difficulty": "Intermediate"
  },
  {
    "id": 145,
    "question": "What is Git submodule and when should you use it?",
    "answer": "<p>Git submodules allow you to include other Git repositories within your project.</p><h3>Common Use Cases:</h3><ul><li>Including shared libraries</li><li>Managing third-party dependencies</li><li>Organizing large projects</li></ul><h3>Basic Commands:</h3><pre><code># Add a submodule\n$ git submodule add https://github.com/username/repo.git path/to/submodule\n\n# Initialize submodules after cloning\n$ git submodule init\n$ git submodule update\n\n# Clone repository with submodules\n$ git clone --recursive https://github.com/username/repo.git\n\n# Update all submodules\n$ git submodule update --remote\n\n# Remove submodule\n$ git submodule deinit path/to/submodule\n$ git rm path/to/submodule</code></pre><h3>Best Practices:</h3><ul><li>Use submodules for stable, versioned dependencies</li><li>Document submodule usage in README</li><li>Consider using package managers for simpler dependency management</li><li>Keep submodules up to date</li></ul>",
    "category": "Git",
    "difficulty": "Advanced"
  },
  {
    "id": 146,
    "question": "Provide All git commands",
    "answer": "<pre><code># Repository Setup\ngit init // Git initialization - creates a new Git repository\ngit clone <repo-url> // Clone remote repository to local machine\n\n# Basic Snapshotting\ngit status // Show working tree status\ngit add <file> // Add file to staging area\ngit add . // Add all files to staging area\ngit commit -m \"Commit message\" // Create commit with message\ngit commit --amend // Modify last commit\n\n# Branching and Merging\ngit branch // List all branches\ngit branch <branch-name> // Create new branch\ngit checkout <branch-name> // Switch to branch\ngit checkout -b <new-branch> // Create and switch to new branch\ngit merge <branch> // Merge branch into current branch\ngit rebase <branch> // Rebase current branch onto another\ngit branch -d <branch> // Delete branch\n\n# Remote Repositories\ngit remote -v // Show remote repositories\ngit remote add origin <url> // Add remote repository\ngit fetch // Download objects from remote\ngit pull // Fetch and merge from remote\ngit pull origin <branch> // Pull specific branch from remote\ngit push // Push commits to remote\ngit push -u origin <branch> // Push and set upstream branch\n\n# Undoing Changes\ngit checkout -- <file> // Discard changes in working directory\ngit reset HEAD <file> // Unstage file\ngit reset --soft HEAD~1 // Undo commit, keep changes staged\ngit reset --hard HEAD~1 // Undo commit and discard changes\ngit revert <commit-hash> // Create new commit that undoes changes\n\n# Logs and History\ngit log // Show commit history\ngit log --oneline // Show compact commit history\ngit show <commit> // Show commit details\ngit diff // Show unstaged changes\ngit diff --staged // Show staged changes\n\n# Stash\ngit stash // Temporarily save changes\ngit stash list // List all stashes\ngit stash apply // Apply most recent stash\ngit stash pop // Apply and remove stash\ngit stash drop // Delete specific stash\ngit stash clear // Delete all stashes\n\n# Tags\ngit tag // List all tags\ngit tag <tagname> // Create lightweight tag\ngit tag -a <tagname> -m \"message\" // Create annotated tag\ngit push origin <tagname> // Push tag to remote\n\n# Submodules\ngit submodule add <repo-url> <path> // Add submodule\ngit submodule init // Initialize submodules\ngit submodule update // Update submodules\ngit submodule update --remote // Update to latest remote commit\ngit submodule deinit <path> // Deinitialize submodule\ngit rm <path> // Remove submodule\n\n# Clean up\ngit clean -f // Remove untracked files\ngit gc // Garbage collection and optimization\n\n# Git Hooks (via Husky or .git/hooks)\n// Setup via scripts - automated actions on Git events\n\n# Misc\ngit help <command> // Get help for specific command</code></pre>",
    "category": "Git",
    "difficulty": "Intermediate"
  }
]