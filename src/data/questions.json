[
  {
    "id": 1,
    "question": "What is the difference between <code>let</code>, <code>const</code>, and <code>var</code> in JavaScript?",
    "answer": "<p>The main differences between <code>let</code>, <code>const</code>, and <code>var</code> are:</p><ul><li><strong>var</strong>: Function-scoped, hoisted, can be redeclared</li><li><strong>let</strong>: Block-scoped, hoisted but not initialized, cannot be redeclared</li><li><strong>const</strong>: Block-scoped, must be initialized, cannot be reassigned</li></ul><pre><code>var x = 1;\nlet y = 2;\nconst z = 3;\n\nvar x = 10;\n// let y = 20;\n// z = 30;</code></pre>",
    "category": "JavaScript",
    "difficulty": "Beginner"
  },
  {
    "id": 2,
    "question": "What is React?",
    "answer": "<p>React is a JavaScript library used for building user interfaces, especially single-page applications where content updates without refreshing the page.</p><pre><code>function App() {\n  return &lt;h1&gt;Hello, React!&lt;/h1&gt;;\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 3,
    "question": "What are components in React?",
    "answer": "<p>Components are like building blocks of a React app. They are reusable pieces of code that return HTML (JSX).</p><ul><li><strong>Functional components</strong></li><li><strong>Class components</strong></li></ul><pre><code>function Welcome() {\n  return &lt;h2&gt;Welcome to React!&lt;/h2&gt;;\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 4,
    "question": "What is JSX?",
    "answer": "<p>JSX stands for JavaScript XML. It allows you to write HTML inside JavaScript.</p><pre><code>const element = &lt;h1&gt;Hello JSX!&lt;/h1&gt;;</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 5,
    "question": "What is the props and state?",
    "answer": "<p>In <strong>React</strong>, <code>props</code> and <code>state</code> are two core concepts used to manage and pass data in components.</p><h4>props</h4><p>Props are used to pass data from parent to child components.</p><p><strong>Key points:</strong></p><ul><li>Read-only (immutable inside the component receiving them)</li><li>Passed from outside the component</li><li>Used to configure a component</li></ul><pre><code>function App() {\n  return &lt;Welcome name=\"Jimit\" /&gt;;\n}\n\nfunction Welcome(props) {\n  return &lt;h1&gt;Hello, {props.name}!&lt;/h1&gt;;\n}</code></pre><h4>state</h4><p><strong>State</strong> is used to <strong>manage data inside a component</strong> that can change over time.</p><p><strong>Key points:</strong></p><ul><li>Mutable (can be updated using useState in functional components)</li><li>Managed inside the component</li><li>Used for interactive or dynamic data</li></ul><pre><code>import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    &lt;&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click me&lt;/button&gt;\n    &lt;/&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 6,
    "question": "What is useState?",
    "answer": "<p><code>useState</code> is a <strong>React Hook</strong> that lets you add <strong>state</strong> to a functional component.</p><pre><code>import { useState } from 'react';\n\nfunction Example() {\n  const [name, setName] = useState(\"John\");\n  return &lt;h1&gt;Hello, {name}!&lt;/h1&gt;;\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 7,
    "question": "What is useEffect?",
    "answer": "<p><code>useEffect</code> is a hook that lets you perform <strong>side effects</strong> (like data fetching, timers) in functional components.</p><pre><code>import { useEffect } from 'react';\n\nfunction Example() {\n  useEffect(() =&gt; {\n    console.log(\"Component mounted!\");\n    return () =&gt; {\n      console.log(\"Component will unmount!\");\n    };\n  }, []);\n  return &lt;div&gt;Example Component&lt;/div&gt;;\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 8,
    "question": "What is the virtual DOM?",
    "answer": "<p>Virtual DOM is a <strong>lightweight copy</strong> of the real DOM. React uses it to <strong>optimize updates</strong>. It compares changes (called <strong>diffing</strong>) and updates only the part that changed.</p>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 9,
    "question": "What is the difference between controlled and uncontrolled components?",
    "answer": "<p><strong>Controlled Component:</strong> React handles the form input.</p><pre><code>function ControlledForm() {\n  const [input, setInput] = useState(\"\");\n  return &lt;input value={input} onChange={e =&gt; setInput(e.target.value)} /&gt;;\n}</code></pre><p><strong>Uncontrolled Component:</strong> DOM handles the form input using <code>ref</code>.</p><pre><code>function UncontrolledForm() {\n  const inputRef = useRef();\n  const handleSubmit = () =&gt; {\n    alert(inputRef.current.value);\n  };\n  return (\n    &lt;&gt;\n      &lt;input type=\"text\" ref={inputRef} /&gt;\n      &lt;button onClick={handleSubmit}&gt;Submit&lt;/button&gt;\n    &lt;/&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 10,
    "question": "What are keys in React?",
    "answer": "<p>Keys help React identify which items in a list are changed or removed. They should be <strong>unique</strong>.</p><pre><code>function TodoList() {\n  const items = [\n    { id: 1, text: 'Learn React' },\n    { id: 2, text: 'Build an app' }\n  ];\n  return (\n    &lt;ul&gt;\n      {items.map(item =&gt; (\n        &lt;li key={item.id}&gt;{item.text}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 11,
    "question": "What is lifting state up?",
    "answer": "<p>When <strong>two components need to share data</strong>, the state is moved to their <strong>common parent</strong>.</p>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 12,
    "question": "What is React Router?",
    "answer": "<p>React Router allows navigation between different pages in a React app without reloading the page.</p><pre><code>&lt;Route path=\"/about\" element={&lt;About /&gt;} /&gt;</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 13,
    "question": "What is Context API?",
    "answer": "<p>Context API lets you pass data deeply through the component tree without manually passing props at every level.</p><pre><code>import React, { createContext, useContext, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nfunction App() {\n  const [theme, setTheme] = useState('light');\n  return (\n    &lt;ThemeContext.Provider value={{ theme, setTheme }}&gt;\n      &lt;Toolbar /&gt;\n    &lt;/ThemeContext.Provider&gt;\n  );\n}\n\nfunction Toolbar() {\n  return (\n    &lt;div&gt;\n      &lt;ThemedButton /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction ThemedButton() {\n  const { theme, setTheme } = useContext(ThemeContext);\n  return (\n    &lt;button\n      onClick={() =&gt; setTheme(theme === 'light' ? 'dark' : 'light')}\n      style={{\n        background: theme === 'light' ? '#fff' : '#333',\n        color: theme === 'light' ? '#000' : '#fff'\n      }}\n    &gt;\n      Current theme: {theme}\n    &lt;/button&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 14,
    "question": "What are fragments in React?",
    "answer": "<p>Fragments let you return multiple elements without adding extra DOM nodes.</p><pre><code>&lt;&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Description&lt;/p&gt;\n&lt;/&gt;</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 15,
    "question": "What is the useEffect and useLayoutEffect?",
    "answer": "<p>Both are <strong>React hooks</strong> used for <strong>side effects</strong> (like fetching data, DOM updates, timers), but they run at <strong>different times</strong> in the component lifecycle.</p><h2><code>useEffect</code></h2><blockquote><p>Runs <strong>after the component renders</strong> and <strong>after the DOM is painted</strong>.</p></blockquote><p>Common use cases:</p><ul><li>Fetching data</li><li>Subscribing to events</li><li>Setting up timers</li></ul><pre><code>import { useEffect, useState } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n  useEffect(() =&gt; {\n    console.log('useEffect: DOM updated');\n  }, [count]);\n  return (\n    &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n      Clicked {count}\n    &lt;/button&gt;\n  );\n}</code></pre><h2><code>useLayoutEffect</code></h2><blockquote><p>Runs <strong>after rendering</strong> but <strong>before the DOM is painted</strong> on the screen.</p></blockquote><p>Use it when:</p><ul><li>You need to <strong>measure layout</strong> or <strong>make DOM changes</strong> that must <strong>block painting</strong> (e.g. scroll, size, position).</li></ul><pre><code>import { useLayoutEffect, useRef } from 'react';\n\nfunction LayoutExample() {\n  const boxRef = useRef();\n  useLayoutEffect(() =&gt; {\n    boxRef.current.style.backgroundColor = 'yellow';\n    console.log('useLayoutEffect: DOM updated before paint');\n  }, []);\n  return &lt;div ref={boxRef}&gt;Hello&lt;/div&gt;;\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 16,
    "question": "What is useRef?",
    "answer": "<p><code>useRef</code> is a hook to <strong>store a reference</strong> to a DOM element or a value that persists between renders.</p><pre><code>function Form() {\n  const inputRef = React.useRef();\n  const handleSubmit = () =&gt; {\n    alert(inputRef.current.value);\n  };\n  return (\n    &lt;&gt;\n      &lt;input type=\"text\" ref={inputRef} /&gt;\n      &lt;button onClick={handleSubmit}&gt;Submit&lt;/button&gt;\n    &lt;/&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 17,
    "question": "What is React.memo?",
    "answer": "<p><code>React.memo</code> is used to <strong>prevent unnecessary re-renders</strong> of a component if its props haven't changed.</p><pre><code>const MyComponent = React.memo(function MyComponent({ name }) {\n  return &lt;p&gt;{name}&lt;/p&gt;;\n});</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 18,
    "question": "What is the difference between useCallback and useMemo?",
    "answer": "<p>Both <code>useCallback</code> and <code>useMemo</code> are <strong>performance optimization hooks</strong> in React. They help avoid unnecessary re-renders or recalculations.</p><h2><code>useCallback</code></h2><blockquote><p><code>useCallback</code> <strong>memoizes a function</strong> — returns the <strong>same function instance</strong> unless its dependencies change.</p></blockquote><p><strong>Use when:</strong> You pass functions to child components and want to <strong>prevent re-creating them on every render</strong>.</p><pre><code>import { useCallback, useState } from 'react';\n\nfunction Parent() {\n  const [count, setCount] = useState(0);\n  const handleClick = useCallback(() =&gt; {\n    console.log('Button clicked');\n  }, []);\n  return (\n    &lt;&gt;\n      &lt;Child onClick={handleClick} /&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Re-render Parent&lt;/button&gt;\n    &lt;/&gt;\n  );\n}\n\nfunction Child({ onClick }) {\n  console.log('Child rendered');\n  return &lt;button onClick={onClick}&gt;Click me&lt;/button&gt;;\n}</code></pre><h2><code>useMemo</code></h2><blockquote><p><code>useMemo</code> <strong>memoizes a computed value</strong> — avoids <strong>expensive recalculations</strong> on every render.</p></blockquote><p><strong>Use when:</strong> You have <strong>slow calculations</strong> or want to <strong>avoid recalculating derived values</strong> unless dependencies change.</p><pre><code>import { useMemo, useState } from 'react';\n\nfunction ExpensiveComponent() {\n  const [count, setCount] = useState(0);\n  const [other, setOther] = useState(false);\n  const expensiveCalculation = useMemo(() =&gt; {\n    console.log('Calculating...');\n    return count * 2;\n  }, [count]);\n  return (\n    &lt;&gt;\n      &lt;p&gt;Expensive Value: {expensiveCalculation}&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Increase&lt;/button&gt;\n      &lt;button onClick={() =&gt; setOther(!other)}&gt;Toggle Other&lt;/button&gt;\n    &lt;/&gt;\n  );\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 19,
    "question": "What is prop drilling and how to avoid it?",
    "answer": "<p>Prop drilling is passing props from parent to child to grandchild, etc., even if only the last one needs it.</p><p><strong>Solution:</strong><br>Use <strong>Context API</strong> or <strong>state management libraries</strong> (like Redux).</p>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 20,
    "question": "What is lazy loading in React?",
    "answer": "<p>Lazy loading means loading components <strong>only when needed</strong> to reduce the initial load time.</p><pre><code>const LazyComponent = React.lazy(() =&gt; import('./MyComponent'));\n\n&lt;Suspense fallback={&lt;div&gt;Loading...&lt;/div&gt;}&gt;\n  &lt;LazyComponent /&gt;\n&lt;/Suspense&gt;</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 21,
    "question": "What is reconciliation in React?",
    "answer": "<p>Reconciliation is the process where React compares the <strong>virtual DOM</strong> with the <strong>real DOM</strong> and updates only what's changed.</p>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 22,
    "question": "What is the significance of the key prop in lists?",
    "answer": "<p>It helps React <strong>track list items</strong> and update them efficiently without re-rendering the whole list.</p>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 23,
    "question": "What are higher-order components (HOC)?",
    "answer": "<p>HOC is a function that takes a component and <strong>returns a new component</strong> with added functionality.</p><pre><code>function withAuth(Component) {\n  return function EnhancedComponent(props) {\n    return &lt;Component {...props} isAuthenticated={true} /&gt;;\n  };\n}</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 24,
    "question": "What is the purpose of defaultProps?",
    "answer": "<p><code>defaultProps</code> sets <strong>default values</strong> for props if no value is passed.</p><pre><code>function Greet({ name }) {\n  return &lt;h1&gt;Hello, {name}&lt;/h1&gt;;\n}\n\nGreet.defaultProps = {\n  name: \"Guest\"\n};</code></pre>",
    "category": "React",
    "difficulty": "Beginner"
  },
  {
    "id": 25,
    "question": "What is Angular?",
		"answer": "<p>Angular is a front-end web framework made by Google to build <strong>single-page web applications (SPA)</strong> using <strong>HTML, CSS, and TypeScript</strong>.</p>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 26,
    "question": "What is a component in Angular?",
		"answer": "<p>A component is the basic building block of an Angular application. It controls a part of the screen called a <strong>view</strong>.</p><pre><code>@Component({\n  selector: 'app-hello',\n  template: '&lt;h1&gt;Hello World!&lt;/h1&gt;'\n})\nexport class HelloComponent { }</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 27,
    "question": "What is a module in Angular?",
		"answer": "<p>A module is a container that holds related components, services, and other modules. Every Angular app has a root module called <code>AppModule</code>.</p><pre><code>@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 28,
    "question": "What is data binding?",
			"answer": "<p>Data binding is the connection between the HTML and the component (TypeScript code). It helps keep your UI and logic in sync.</p><p><strong>Types:</strong></p><ul><li><strong>Interpolation</strong> – <code>{{ name }}</code></li><li><strong>Property binding</strong> – <code>[src]=\"imageUrl\"</code></li><li><strong>Event binding</strong> – <code>(click)=\"sayHello()\"</code></li><li><strong>Two-way binding</strong> – <code>[(ngModel)]=\"userInput\"</code></li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 29,
    "question": "What is dependency injection?",
			"answer": "<p>Dependency injection is a design pattern used to provide services (like APIs, logic, etc.) to components automatically.</p><pre><code>constructor(private userService: UserService) { }</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 30,
    "question": "What is a service in Angular?",
			"answer": "<p>A service is a class used to write business logic, such as fetching data from an API. It can be shared across multiple components.</p><pre><code>@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  getData() {\n    return this.http.get('/api/data');\n  }\n}</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 31,
    "question": "What is routing in Angular?",
			"answer": "<p>Routing is how Angular navigates between different pages or views in a single-page app.</p><pre><code>const routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent }\n];</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 32,
    "question": "What are directives?",
			"answer": "<p>Directives are instructions in the template that tell Angular how to render or change elements.</p><p><strong>Types:</strong></p><ul><li><strong>Structural</strong> – <code>*ngIf</code>, <code>*ngFor</code></li><li><strong>Attribute</strong> – <code>[ngClass]</code>, <code>[ngStyle]</code></li><li><strong>Custom</strong> – You can create your own directive.</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 33,
    "question": "What is the difference between ngIf and ngFor?",
			"answer": "<ul><li><code>*ngIf</code> is used to <strong>show or hide</strong> an element.</li><li><code>*ngFor</code> is used to <strong>loop through a list</strong> and create multiple elements.</li></ul><pre><code>&lt;p *ngIf=\"isLoggedIn\"&gt;Welcome!&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *ngFor=\"let item of items\"&gt;{{ item }}&lt;/li&gt;\n&lt;/ul&gt;</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 34,
    "question": "What is a pipe in Angular?",
			"answer": "<p>Pipes are used to transform data in the template</p><pre><code>&lt;p&gt;{{ birthday | date:'longDate' }}&lt;/p&gt;\n&lt;p&gt;{{ price | currency:'USD' }}&lt;/p&gt;</code></pre>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 35,
    "question": "What is the difference between @Input() and @Output()?",
			"answer": "<ul><li><code>@Input()</code> – Pass data <strong>from parent to child</strong> component.</li><li><code>@Output()</code> – Send data <strong>from child to parent</strong> component using <code>EventEmitter</code>.</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 36,
    "question": "What is lazy loading?",
			"answer": "<p>Lazy loading means loading a module <strong>only when it's needed</strong>, not at the start. It helps improve performance.</p>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 37,
    "question": "What is Angular CLI?",
			"answer": "<p>Angular CLI is a command-line tool to create and manage Angular apps.</p><p><strong>Example commands:</strong></p><ul><li><code>ng new my-app</code> – create a new app</li><li><code>ng serve</code> – run the app</li><li><code>ng generate component header</code> – create a component</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 38,
    "question": "How do you share data between components?",
			"answer": "<ul><li><strong>Parent to Child</strong> – use <code>@Input()</code></li><li><strong>Child to Parent</strong> – use <code>@Output()</code></li><li><strong>Sibling components</strong> – use a <strong>shared service</strong></li><li><strong>Across app</strong> – use <strong>NgRx</strong> or shared services</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 39,
    "question": "What is Ahead-of-Time (AOT) Compilation?",
			"answer": "<p>Angular offers two types of compilation:</p><ul><li><strong>JIT (Just-in-Time):</strong> Compiles in the browser (during development)</li><li><strong>AOT (Ahead-of-Time):</strong> Compiles during build time (for production)</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 40,
    "question": "What are lifecycle hooks in Angular?",
			"answer": "<p>Lifecycle hooks are special methods Angular calls at different stages of a component's life — from creation to destruction.</p><ul><li><code>constructor</code>When the component is created (used for simple setup)</li><li><code>ngOnChanges()</code>When an input property changes</li><li><code>ngOnInit()</code>After the first <code>ngOnChanges</code> – good for API calls</li><li><code>ngDoCheck()</code>Custom change detection (called often)</li><li><code>ngAfterContentInit()</code>After external content is projected into the component</li><li><code>ngAfterContentChecked()</code>After every check of projected content</li><li><code>ngAfterViewInit()</code>After component view (and child views) are initialized</li><li><code>ngAfterViewChecked()</code>After every check of the component and child views</li><li><code>ngOnDestroy()</code>Just before the component is destroyed – cleanup time</li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 41,
    "question": "What is the difference between Observable and Promise?",
			"answer": "<p><strong>Observable</strong></p><ul><li>Can emit <strong>multiple values</strong></li><li>it can be <strong>Cancelable</strong></li><li>its <strong>Lazy </strong>(runs only when subscribed)</li></ul><p><strong>Promise</strong></p><ul><li>Emits <strong>one value</strong> only</li><li>it can not be <strong>Cancelable</strong></li><li>its <strong>Lazy</strong></li></ul>",
    "category": "Angular",
    "difficulty": "Beginner"
  },
  {
    "id": 42,
    "question": "What is the difference between <code>==</code> and <code>===</code>?",
    "answer": "<ul><li><code>==</code> checks value only (loose equality).</li><li><code>===</code> checks value and type (strict equality).</li></ul><pre><code>console.log(5 == '5');  // true\nconsole.log(5 === '5'); // false</code></pre>",
    "category": "JavaScript",
    "difficulty": "Beginner"
  },
  {
    "id": 43,
    "question": "What is hoisting in JavaScript?",
    "answer": "<p>Hoisting means moving variable and function declarations to the top of their scope before code execution.<p><pre><code>console.log(a); // undefined\nvar a = 5;</code></pre>",
    "category": "JavaScript",
    "difficulty": "Beginner"
  },
  {
    "id": 43,
    "question": "What is the difference between <code>shallow copy</code> and <code>deep copy</code> in ES6?",
    "answer": "<p><strong>Shallow Copy</strong></p><p>A shallow copy copies only the first level of an object or array. If the object has nested objects, the nested objects still refer to the same memory.<p><p><strong>Deep Copy</strong></p><p>A deep copy copies everything, including nested objects. So, changes to the copy do not affect the original.<p>",
    "category": "JavaScript",
    "difficulty": "Beginner"
  }
]